package ${packageName};

import com.igormaznitsa.jbbp.io.JBBPBitInputStream;
import com.igormaznitsa.jbbp.io.JBBPBitOrder;
import com.igormaznitsa.jbbp.io.JBBPByteOrder;
import com.igormaznitsa.jbbp.io.JBBPBitNumber;
import com.igormaznitsa.jbbp.utils.JBBPUtils;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.IOException;
${import}

${classComments}
${classModifiers} class ${className} {

${mainFields}
${staticFields}

  public ${className}(${constructorArgs}){
${constructorBody}
  }

  public ${className} read(byte [] array) throws IOException {
    return this.read(new JBBPBitInputStream(new ByteArrayInputStream(array)));
  }

  public ${className} read(InputStream inStream) throws IOException {
    return this.read(inStream, JBBPBitOrder.LSB0);
  }

  public ${className} read(InputStream inStream, JBBPBitOrder bitOrder) throws IOException {
    final JBBPBitInputStream theStream;

    if (inStream instanceof JBBPBitInputStream) {
      theStream = ((JBBPBitInputStream) inStream).getBitOrder() == bitOrder ? (JBBPBitInputStream)inStream : new JBBPBitInputStream(inStream,bitOrder);
    } else {
      theStream = new JBBPBitInputStream(inStream,bitOrder);
    }

${readFields}

    return this;
  }

${methods}
}
